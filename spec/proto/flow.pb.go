// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: spec/proto/flow.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RunStatus represents the lifecycle status of a Run.
type RunStatus int32

const (
	RunStatus_RUN_STATUS_UNSPECIFIED RunStatus = 0
	RunStatus_RUN_STATUS_PENDING     RunStatus = 1
	RunStatus_RUN_STATUS_RUNNING     RunStatus = 2
	RunStatus_RUN_STATUS_SUCCEEDED   RunStatus = 3
	RunStatus_RUN_STATUS_FAILED      RunStatus = 4
	RunStatus_RUN_STATUS_SKIPPED     RunStatus = 5
	RunStatus_RUN_STATUS_WAITING     RunStatus = 6
)

// Enum value maps for RunStatus.
var (
	RunStatus_name = map[int32]string{
		0: "RUN_STATUS_UNSPECIFIED",
		1: "RUN_STATUS_PENDING",
		2: "RUN_STATUS_RUNNING",
		3: "RUN_STATUS_SUCCEEDED",
		4: "RUN_STATUS_FAILED",
		5: "RUN_STATUS_SKIPPED",
		6: "RUN_STATUS_WAITING",
	}
	RunStatus_value = map[string]int32{
		"RUN_STATUS_UNSPECIFIED": 0,
		"RUN_STATUS_PENDING":     1,
		"RUN_STATUS_RUNNING":     2,
		"RUN_STATUS_SUCCEEDED":   3,
		"RUN_STATUS_FAILED":      4,
		"RUN_STATUS_SKIPPED":     5,
		"RUN_STATUS_WAITING":     6,
	}
)

func (x RunStatus) Enum() *RunStatus {
	p := new(RunStatus)
	*p = x
	return p
}

func (x RunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_flow_proto_enumTypes[0].Descriptor()
}

func (RunStatus) Type() protoreflect.EnumType {
	return &file_spec_proto_flow_proto_enumTypes[0]
}

func (x RunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunStatus.Descriptor instead.
func (RunStatus) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{0}
}

// StepStatus represents the lifecycle status of a StepRun.
type StepStatus int32

const (
	StepStatus_STEP_STATUS_UNSPECIFIED StepStatus = 0
	StepStatus_STEP_STATUS_PENDING     StepStatus = 1
	StepStatus_STEP_STATUS_RUNNING     StepStatus = 2
	StepStatus_STEP_STATUS_SUCCEEDED   StepStatus = 3
	StepStatus_STEP_STATUS_FAILED      StepStatus = 4
	StepStatus_STEP_STATUS_WAITING     StepStatus = 5
)

// Enum value maps for StepStatus.
var (
	StepStatus_name = map[int32]string{
		0: "STEP_STATUS_UNSPECIFIED",
		1: "STEP_STATUS_PENDING",
		2: "STEP_STATUS_RUNNING",
		3: "STEP_STATUS_SUCCEEDED",
		4: "STEP_STATUS_FAILED",
		5: "STEP_STATUS_WAITING",
	}
	StepStatus_value = map[string]int32{
		"STEP_STATUS_UNSPECIFIED": 0,
		"STEP_STATUS_PENDING":     1,
		"STEP_STATUS_RUNNING":     2,
		"STEP_STATUS_SUCCEEDED":   3,
		"STEP_STATUS_FAILED":      4,
		"STEP_STATUS_WAITING":     5,
	}
)

func (x StepStatus) Enum() *StepStatus {
	p := new(StepStatus)
	*p = x
	return p
}

func (x StepStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StepStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_flow_proto_enumTypes[1].Descriptor()
}

func (StepStatus) Type() protoreflect.EnumType {
	return &file_spec_proto_flow_proto_enumTypes[1]
}

func (x StepStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StepStatus.Descriptor instead.
func (StepStatus) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{1}
}

// A Flow is the unit of work.
type Flow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	On            *Trigger               `protobuf:"bytes,2,opt,name=on,proto3" json:"on,omitempty"`
	Vars          map[string]*Value      `protobuf:"bytes,3,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Steps         []*Step                `protobuf:"bytes,4,rep,name=steps,proto3" json:"steps,omitempty"`
	Catch         []*Step                `protobuf:"bytes,5,rep,name=catch,proto3" json:"catch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flow) Reset() {
	*x = Flow{}
	mi := &file_spec_proto_flow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{0}
}

func (x *Flow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flow) GetOn() *Trigger {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *Flow) GetVars() map[string]*Value {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *Flow) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Flow) GetCatch() []*Step {
	if x != nil {
		return x.Catch
	}
	return nil
}

// How a flow starts.
type Trigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Trigger_CliManual
	//	*Trigger_Schedule
	//	*Trigger_McpEvent
	//	*Trigger_Http
	Kind          isTrigger_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	mi := &file_spec_proto_flow_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{1}
}

func (x *Trigger) GetKind() isTrigger_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Trigger) GetCliManual() *CliManualTrigger {
	if x != nil {
		if x, ok := x.Kind.(*Trigger_CliManual); ok {
			return x.CliManual
		}
	}
	return nil
}

func (x *Trigger) GetSchedule() *ScheduleCron {
	if x != nil {
		if x, ok := x.Kind.(*Trigger_Schedule); ok {
			return x.Schedule
		}
	}
	return nil
}

func (x *Trigger) GetMcpEvent() *McpEventTrigger {
	if x != nil {
		if x, ok := x.Kind.(*Trigger_McpEvent); ok {
			return x.McpEvent
		}
	}
	return nil
}

func (x *Trigger) GetHttp() *HttpTrigger {
	if x != nil {
		if x, ok := x.Kind.(*Trigger_Http); ok {
			return x.Http
		}
	}
	return nil
}

type isTrigger_Kind interface {
	isTrigger_Kind()
}

type Trigger_CliManual struct {
	CliManual *CliManualTrigger `protobuf:"bytes,1,opt,name=cli_manual,json=cliManual,proto3,oneof"`
}

type Trigger_Schedule struct {
	Schedule *ScheduleCron `protobuf:"bytes,2,opt,name=schedule,proto3,oneof"`
}

type Trigger_McpEvent struct {
	McpEvent *McpEventTrigger `protobuf:"bytes,3,opt,name=mcp_event,json=mcpEvent,proto3,oneof"`
}

type Trigger_Http struct {
	Http *HttpTrigger `protobuf:"bytes,4,opt,name=http,proto3,oneof"`
}

func (*Trigger_CliManual) isTrigger_Kind() {}

func (*Trigger_Schedule) isTrigger_Kind() {}

func (*Trigger_McpEvent) isTrigger_Kind() {}

func (*Trigger_Http) isTrigger_Kind() {}

type CliManualTrigger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CliManualTrigger) Reset() {
	*x = CliManualTrigger{}
	mi := &file_spec_proto_flow_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliManualTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliManualTrigger) ProtoMessage() {}

func (x *CliManualTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliManualTrigger.ProtoReflect.Descriptor instead.
func (*CliManualTrigger) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{2}
}

type ScheduleCron struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cron          string                 `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleCron) Reset() {
	*x = ScheduleCron{}
	mi := &file_spec_proto_flow_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleCron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleCron) ProtoMessage() {}

func (x *ScheduleCron) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleCron.ProtoReflect.Descriptor instead.
func (*ScheduleCron) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{3}
}

func (x *ScheduleCron) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

type McpEventTrigger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpEventTrigger) Reset() {
	*x = McpEventTrigger{}
	mi := &file_spec_proto_flow_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpEventTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpEventTrigger) ProtoMessage() {}

func (x *McpEventTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpEventTrigger.ProtoReflect.Descriptor instead.
func (*McpEventTrigger) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{4}
}

func (x *McpEventTrigger) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *McpEventTrigger) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type HttpTrigger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpTrigger) Reset() {
	*x = HttpTrigger{}
	mi := &file_spec_proto_flow_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpTrigger) ProtoMessage() {}

func (x *HttpTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpTrigger.ProtoReflect.Descriptor instead.
func (*HttpTrigger) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{5}
}

func (x *HttpTrigger) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpTrigger) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

// A single step in the flow DAG.
type Step struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Behavior:
	//
	//	*Step_Exec
	//	*Step_Parallel
	//	*Step_Foreach
	//	*Step_AwaitEvent
	//	*Step_Wait
	Behavior      isStep_Behavior `protobuf_oneof:"behavior"`
	DependsOn     []string        `protobuf:"bytes,7,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	Condition     string          `protobuf:"bytes,8,opt,name=condition,proto3" json:"condition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Step) Reset() {
	*x = Step{}
	mi := &file_spec_proto_flow_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{6}
}

func (x *Step) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Step) GetBehavior() isStep_Behavior {
	if x != nil {
		return x.Behavior
	}
	return nil
}

func (x *Step) GetExec() *Execute {
	if x != nil {
		if x, ok := x.Behavior.(*Step_Exec); ok {
			return x.Exec
		}
	}
	return nil
}

func (x *Step) GetParallel() *Parallel {
	if x != nil {
		if x, ok := x.Behavior.(*Step_Parallel); ok {
			return x.Parallel
		}
	}
	return nil
}

func (x *Step) GetForeach() *Foreach {
	if x != nil {
		if x, ok := x.Behavior.(*Step_Foreach); ok {
			return x.Foreach
		}
	}
	return nil
}

func (x *Step) GetAwaitEvent() *AwaitEvent {
	if x != nil {
		if x, ok := x.Behavior.(*Step_AwaitEvent); ok {
			return x.AwaitEvent
		}
	}
	return nil
}

func (x *Step) GetWait() *Wait {
	if x != nil {
		if x, ok := x.Behavior.(*Step_Wait); ok {
			return x.Wait
		}
	}
	return nil
}

func (x *Step) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *Step) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type isStep_Behavior interface {
	isStep_Behavior()
}

type Step_Exec struct {
	Exec *Execute `protobuf:"bytes,2,opt,name=exec,proto3,oneof"`
}

type Step_Parallel struct {
	Parallel *Parallel `protobuf:"bytes,3,opt,name=parallel,proto3,oneof"`
}

type Step_Foreach struct {
	Foreach *Foreach `protobuf:"bytes,4,opt,name=foreach,proto3,oneof"`
}

type Step_AwaitEvent struct {
	AwaitEvent *AwaitEvent `protobuf:"bytes,5,opt,name=await_event,json=awaitEvent,proto3,oneof"`
}

type Step_Wait struct {
	Wait *Wait `protobuf:"bytes,6,opt,name=wait,proto3,oneof"`
}

func (*Step_Exec) isStep_Behavior() {}

func (*Step_Parallel) isStep_Behavior() {}

func (*Step_Foreach) isStep_Behavior() {}

func (*Step_AwaitEvent) isStep_Behavior() {}

func (*Step_Wait) isStep_Behavior() {}

type Execute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Use           string                 `protobuf:"bytes,1,opt,name=use,proto3" json:"use,omitempty"`
	With          map[string]*Value      `protobuf:"bytes,2,rep,name=with,proto3" json:"with,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Retry         *RetryPolicy           `protobuf:"bytes,3,opt,name=retry,proto3" json:"retry,omitempty"`
	Catch         *CatchBlock            `protobuf:"bytes,4,opt,name=catch,proto3" json:"catch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Execute) Reset() {
	*x = Execute{}
	mi := &file_spec_proto_flow_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execute) ProtoMessage() {}

func (x *Execute) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execute.ProtoReflect.Descriptor instead.
func (*Execute) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{7}
}

func (x *Execute) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *Execute) GetWith() map[string]*Value {
	if x != nil {
		return x.With
	}
	return nil
}

func (x *Execute) GetRetry() *RetryPolicy {
	if x != nil {
		return x.Retry
	}
	return nil
}

func (x *Execute) GetCatch() *CatchBlock {
	if x != nil {
		return x.Catch
	}
	return nil
}

type Parallel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steps         []*Step                `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Parallel) Reset() {
	*x = Parallel{}
	mi := &file_spec_proto_flow_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Parallel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parallel) ProtoMessage() {}

func (x *Parallel) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parallel.ProtoReflect.Descriptor instead.
func (*Parallel) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{8}
}

func (x *Parallel) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

type Foreach struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListExpr      string                 `protobuf:"bytes,1,opt,name=list_expr,json=listExpr,proto3" json:"list_expr,omitempty"`
	Template      *Step                  `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	Alias         string                 `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	Steps         []*Step                `protobuf:"bytes,4,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Foreach) Reset() {
	*x = Foreach{}
	mi := &file_spec_proto_flow_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Foreach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Foreach) ProtoMessage() {}

func (x *Foreach) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Foreach.ProtoReflect.Descriptor instead.
func (*Foreach) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{9}
}

func (x *Foreach) GetListExpr() string {
	if x != nil {
		return x.ListExpr
	}
	return ""
}

func (x *Foreach) GetTemplate() *Step {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Foreach) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Foreach) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

type AwaitEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Match         *MatchCondition        `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`
	Timeout       *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwaitEvent) Reset() {
	*x = AwaitEvent{}
	mi := &file_spec_proto_flow_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwaitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwaitEvent) ProtoMessage() {}

func (x *AwaitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwaitEvent.ProtoReflect.Descriptor instead.
func (*AwaitEvent) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{10}
}

func (x *AwaitEvent) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AwaitEvent) GetMatch() *MatchCondition {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *AwaitEvent) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Wait struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seconds       int32                  `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Until         string                 `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Wait) Reset() {
	*x = Wait{}
	mi := &file_spec_proto_flow_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Wait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wait) ProtoMessage() {}

func (x *Wait) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wait.ProtoReflect.Descriptor instead.
func (*Wait) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{11}
}

func (x *Wait) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Wait) GetUntil() string {
	if x != nil {
		return x.Until
	}
	return ""
}

type RetryPolicy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxRetries    int32                  `protobuf:"varint,1,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	Backoff       *durationpb.Duration   `protobuf:"bytes,2,opt,name=backoff,proto3" json:"backoff,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_spec_proto_flow_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{12}
}

func (x *RetryPolicy) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *RetryPolicy) GetBackoff() *durationpb.Duration {
	if x != nil {
		return x.Backoff
	}
	return nil
}

type CatchBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorVar      string                 `protobuf:"bytes,1,opt,name=error_var,json=errorVar,proto3" json:"error_var,omitempty"`
	Handler       *Step                  `protobuf:"bytes,2,opt,name=handler,proto3" json:"handler,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CatchBlock) Reset() {
	*x = CatchBlock{}
	mi := &file_spec_proto_flow_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CatchBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatchBlock) ProtoMessage() {}

func (x *CatchBlock) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatchBlock.ProtoReflect.Descriptor instead.
func (*CatchBlock) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{13}
}

func (x *CatchBlock) GetErrorVar() string {
	if x != nil {
		return x.ErrorVar
	}
	return ""
}

func (x *CatchBlock) GetHandler() *Step {
	if x != nil {
		return x.Handler
	}
	return nil
}

type MatchCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Equals        map[string]string      `protobuf:"bytes,1,rep,name=equals,proto3" json:"equals,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchCondition) Reset() {
	*x = MatchCondition{}
	mi := &file_spec_proto_flow_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCondition) ProtoMessage() {}

func (x *MatchCondition) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCondition.ProtoReflect.Descriptor instead.
func (*MatchCondition) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{14}
}

func (x *MatchCondition) GetEquals() map[string]string {
	if x != nil {
		return x.Equals
	}
	return nil
}

// Value is a generic value type for variables, with/outputs, etc.
type Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Value_S
	//	*Value_N
	//	*Value_B
	//	*Value_M
	//	*Value_L
	Value         isValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_spec_proto_flow_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{15}
}

func (x *Value) GetValue() isValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Value) GetS() string {
	if x != nil {
		if x, ok := x.Value.(*Value_S); ok {
			return x.S
		}
	}
	return ""
}

func (x *Value) GetN() float64 {
	if x != nil {
		if x, ok := x.Value.(*Value_N); ok {
			return x.N
		}
	}
	return 0
}

func (x *Value) GetB() bool {
	if x != nil {
		if x, ok := x.Value.(*Value_B); ok {
			return x.B
		}
	}
	return false
}

func (x *Value) GetM() *Struct {
	if x != nil {
		if x, ok := x.Value.(*Value_M); ok {
			return x.M
		}
	}
	return nil
}

func (x *Value) GetL() *ListValue {
	if x != nil {
		if x, ok := x.Value.(*Value_L); ok {
			return x.L
		}
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_S struct {
	S string `protobuf:"bytes,1,opt,name=s,proto3,oneof"`
}

type Value_N struct {
	N float64 `protobuf:"fixed64,2,opt,name=n,proto3,oneof"`
}

type Value_B struct {
	B bool `protobuf:"varint,3,opt,name=b,proto3,oneof"`
}

type Value_M struct {
	M *Struct `protobuf:"bytes,4,opt,name=m,proto3,oneof"`
}

type Value_L struct {
	L *ListValue `protobuf:"bytes,5,opt,name=l,proto3,oneof"`
}

func (*Value_S) isValue_Value() {}

func (*Value_N) isValue_Value() {}

func (*Value_B) isValue_Value() {}

func (*Value_M) isValue_Value() {}

func (*Value_L) isValue_Value() {}

type Struct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        map[string]*Value      `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Struct) Reset() {
	*x = Struct{}
	mi := &file_spec_proto_flow_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

func (x *Struct) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{16}
}

func (x *Struct) GetFields() map[string]*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*Value               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListValue) Reset() {
	*x = ListValue{}
	mi := &file_spec_proto_flow_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValue) ProtoMessage() {}

func (x *ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValue.ProtoReflect.Descriptor instead.
func (*ListValue) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{17}
}

func (x *ListValue) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// Execution details of a single step in a Run.
type StepRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	StepName      string                 `protobuf:"bytes,3,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty"`
	Outputs       map[string]*Value      `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Status        StepStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=protocol.StepStatus" json:"status,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	Error         string                 `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepRun) Reset() {
	*x = StepRun{}
	mi := &file_spec_proto_flow_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepRun) ProtoMessage() {}

func (x *StepRun) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepRun.ProtoReflect.Descriptor instead.
func (*StepRun) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{18}
}

func (x *StepRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StepRun) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *StepRun) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *StepRun) GetOutputs() map[string]*Value {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *StepRun) GetStatus() StepStatus {
	if x != nil {
		return x.Status
	}
	return StepStatus_STEP_STATUS_UNSPECIFIED
}

func (x *StepRun) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *StepRun) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *StepRun) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Run is an execution instance of a Flow.
type Run struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FlowName      string                 `protobuf:"bytes,2,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	Event         map[string]*Value      `protobuf:"bytes,3,rep,name=event,proto3" json:"event,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Vars          map[string]*Value      `protobuf:"bytes,4,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Steps         []*StepRun             `protobuf:"bytes,5,rep,name=steps,proto3" json:"steps,omitempty"`
	Status        RunStatus              `protobuf:"varint,6,opt,name=status,proto3,enum=protocol.RunStatus" json:"status,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Run) Reset() {
	*x = Run{}
	mi := &file_spec_proto_flow_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_flow_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_spec_proto_flow_proto_rawDescGZIP(), []int{19}
}

func (x *Run) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Run) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *Run) GetEvent() map[string]*Value {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Run) GetVars() map[string]*Value {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *Run) GetSteps() []*StepRun {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Run) GetStatus() RunStatus {
	if x != nil {
		return x.Status
	}
	return RunStatus_RUN_STATUS_UNSPECIFIED
}

func (x *Run) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Run) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

var File_spec_proto_flow_proto protoreflect.FileDescriptor

const file_spec_proto_flow_proto_rawDesc = "" +
	"\n" +
	"\x15spec/proto/flow.proto\x12\bprotocol\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x81\x02\n" +
	"\x04Flow\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\x02on\x18\x02 \x01(\v2\x11.protocol.TriggerR\x02on\x12,\n" +
	"\x04vars\x18\x03 \x03(\v2\x18.protocol.Flow.VarsEntryR\x04vars\x12$\n" +
	"\x05steps\x18\x04 \x03(\v2\x0e.protocol.StepR\x05steps\x12$\n" +
	"\x05catch\x18\x05 \x03(\v2\x0e.protocol.StepR\x05catch\x1aH\n" +
	"\tVarsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.protocol.ValueR\x05value:\x028\x01\"\xeb\x01\n" +
	"\aTrigger\x12;\n" +
	"\n" +
	"cli_manual\x18\x01 \x01(\v2\x1a.protocol.CliManualTriggerH\x00R\tcliManual\x124\n" +
	"\bschedule\x18\x02 \x01(\v2\x16.protocol.ScheduleCronH\x00R\bschedule\x128\n" +
	"\tmcp_event\x18\x03 \x01(\v2\x19.protocol.McpEventTriggerH\x00R\bmcpEvent\x12+\n" +
	"\x04http\x18\x04 \x01(\v2\x15.protocol.HttpTriggerH\x00R\x04httpB\x06\n" +
	"\x04kind\"\x12\n" +
	"\x10CliManualTrigger\"\"\n" +
	"\fScheduleCron\x12\x12\n" +
	"\x04cron\x18\x01 \x01(\tR\x04cron\"?\n" +
	"\x0fMcpEventTrigger\x12\x16\n" +
	"\x06source\x18\x01 \x01(\tR\x06source\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\"\x9b\x01\n" +
	"\vHttpTrigger\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12<\n" +
	"\aheaders\x18\x02 \x03(\v2\".protocol.HttpTrigger.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc8\x02\n" +
	"\x04Step\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x04exec\x18\x02 \x01(\v2\x11.protocol.ExecuteH\x00R\x04exec\x120\n" +
	"\bparallel\x18\x03 \x01(\v2\x12.protocol.ParallelH\x00R\bparallel\x12-\n" +
	"\aforeach\x18\x04 \x01(\v2\x11.protocol.ForeachH\x00R\aforeach\x127\n" +
	"\vawait_event\x18\x05 \x01(\v2\x14.protocol.AwaitEventH\x00R\n" +
	"awaitEvent\x12$\n" +
	"\x04wait\x18\x06 \x01(\v2\x0e.protocol.WaitH\x00R\x04wait\x12\x1d\n" +
	"\n" +
	"depends_on\x18\a \x03(\tR\tdependsOn\x12\x1c\n" +
	"\tcondition\x18\b \x01(\tR\tconditionB\n" +
	"\n" +
	"\bbehavior\"\xef\x01\n" +
	"\aExecute\x12\x10\n" +
	"\x03use\x18\x01 \x01(\tR\x03use\x12/\n" +
	"\x04with\x18\x02 \x03(\v2\x1b.protocol.Execute.WithEntryR\x04with\x12+\n" +
	"\x05retry\x18\x03 \x01(\v2\x15.protocol.RetryPolicyR\x05retry\x12*\n" +
	"\x05catch\x18\x04 \x01(\v2\x14.protocol.CatchBlockR\x05catch\x1aH\n" +
	"\tWithEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.protocol.ValueR\x05value:\x028\x01\"0\n" +
	"\bParallel\x12$\n" +
	"\x05steps\x18\x01 \x03(\v2\x0e.protocol.StepR\x05steps\"\x8e\x01\n" +
	"\aForeach\x12\x1b\n" +
	"\tlist_expr\x18\x01 \x01(\tR\blistExpr\x12*\n" +
	"\btemplate\x18\x02 \x01(\v2\x0e.protocol.StepR\btemplate\x12\x14\n" +
	"\x05alias\x18\x03 \x01(\tR\x05alias\x12$\n" +
	"\x05steps\x18\x04 \x03(\v2\x0e.protocol.StepR\x05steps\"\x89\x01\n" +
	"\n" +
	"AwaitEvent\x12\x16\n" +
	"\x06source\x18\x01 \x01(\tR\x06source\x12.\n" +
	"\x05match\x18\x02 \x01(\v2\x18.protocol.MatchConditionR\x05match\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\"6\n" +
	"\x04Wait\x12\x18\n" +
	"\aseconds\x18\x01 \x01(\x05R\aseconds\x12\x14\n" +
	"\x05until\x18\x02 \x01(\tR\x05until\"c\n" +
	"\vRetryPolicy\x12\x1f\n" +
	"\vmax_retries\x18\x01 \x01(\x05R\n" +
	"maxRetries\x123\n" +
	"\abackoff\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\abackoff\"S\n" +
	"\n" +
	"CatchBlock\x12\x1b\n" +
	"\terror_var\x18\x01 \x01(\tR\berrorVar\x12(\n" +
	"\ahandler\x18\x02 \x01(\v2\x0e.protocol.StepR\ahandler\"\x89\x01\n" +
	"\x0eMatchCondition\x12<\n" +
	"\x06equals\x18\x01 \x03(\v2$.protocol.MatchCondition.EqualsEntryR\x06equals\x1a9\n" +
	"\vEqualsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x87\x01\n" +
	"\x05Value\x12\x0e\n" +
	"\x01s\x18\x01 \x01(\tH\x00R\x01s\x12\x0e\n" +
	"\x01n\x18\x02 \x01(\x01H\x00R\x01n\x12\x0e\n" +
	"\x01b\x18\x03 \x01(\bH\x00R\x01b\x12 \n" +
	"\x01m\x18\x04 \x01(\v2\x10.protocol.StructH\x00R\x01m\x12#\n" +
	"\x01l\x18\x05 \x01(\v2\x13.protocol.ListValueH\x00R\x01lB\a\n" +
	"\x05value\"\x8a\x01\n" +
	"\x06Struct\x124\n" +
	"\x06fields\x18\x01 \x03(\v2\x1c.protocol.Struct.FieldsEntryR\x06fields\x1aJ\n" +
	"\vFieldsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.protocol.ValueR\x05value:\x028\x01\"4\n" +
	"\tListValue\x12'\n" +
	"\x06values\x18\x01 \x03(\v2\x0f.protocol.ValueR\x06values\"\x8a\x03\n" +
	"\aStepRun\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x1b\n" +
	"\tstep_name\x18\x03 \x01(\tR\bstepName\x128\n" +
	"\aoutputs\x18\x04 \x03(\v2\x1e.protocol.StepRun.OutputsEntryR\aoutputs\x12,\n" +
	"\x06status\x18\x05 \x01(\x0e2\x14.protocol.StepStatusR\x06status\x129\n" +
	"\n" +
	"started_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x125\n" +
	"\bended_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\aendedAt\x12\x14\n" +
	"\x05error\x18\b \x01(\tR\x05error\x1aK\n" +
	"\fOutputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.protocol.ValueR\x05value:\x028\x01\"\xec\x03\n" +
	"\x03Run\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tflow_name\x18\x02 \x01(\tR\bflowName\x12.\n" +
	"\x05event\x18\x03 \x03(\v2\x18.protocol.Run.EventEntryR\x05event\x12+\n" +
	"\x04vars\x18\x04 \x03(\v2\x17.protocol.Run.VarsEntryR\x04vars\x12'\n" +
	"\x05steps\x18\x05 \x03(\v2\x11.protocol.StepRunR\x05steps\x12+\n" +
	"\x06status\x18\x06 \x01(\x0e2\x13.protocol.RunStatusR\x06status\x129\n" +
	"\n" +
	"started_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x125\n" +
	"\bended_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\aendedAt\x1aI\n" +
	"\n" +
	"EventEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.protocol.ValueR\x05value:\x028\x01\x1aH\n" +
	"\tVarsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.protocol.ValueR\x05value:\x028\x01*\xb8\x01\n" +
	"\tRunStatus\x12\x1a\n" +
	"\x16RUN_STATUS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12RUN_STATUS_PENDING\x10\x01\x12\x16\n" +
	"\x12RUN_STATUS_RUNNING\x10\x02\x12\x18\n" +
	"\x14RUN_STATUS_SUCCEEDED\x10\x03\x12\x15\n" +
	"\x11RUN_STATUS_FAILED\x10\x04\x12\x16\n" +
	"\x12RUN_STATUS_SKIPPED\x10\x05\x12\x16\n" +
	"\x12RUN_STATUS_WAITING\x10\x06*\xa7\x01\n" +
	"\n" +
	"StepStatus\x12\x1b\n" +
	"\x17STEP_STATUS_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13STEP_STATUS_PENDING\x10\x01\x12\x17\n" +
	"\x13STEP_STATUS_RUNNING\x10\x02\x12\x19\n" +
	"\x15STEP_STATUS_SUCCEEDED\x10\x03\x12\x16\n" +
	"\x12STEP_STATUS_FAILED\x10\x04\x12\x17\n" +
	"\x13STEP_STATUS_WAITING\x10\x05B2Z0github.com/awantoch/beemflow/spec/proto;protocolb\x06proto3"

var (
	file_spec_proto_flow_proto_rawDescOnce sync.Once
	file_spec_proto_flow_proto_rawDescData []byte
)

func file_spec_proto_flow_proto_rawDescGZIP() []byte {
	file_spec_proto_flow_proto_rawDescOnce.Do(func() {
		file_spec_proto_flow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spec_proto_flow_proto_rawDesc), len(file_spec_proto_flow_proto_rawDesc)))
	})
	return file_spec_proto_flow_proto_rawDescData
}

var file_spec_proto_flow_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_spec_proto_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_spec_proto_flow_proto_goTypes = []any{
	(RunStatus)(0),                // 0: protocol.RunStatus
	(StepStatus)(0),               // 1: protocol.StepStatus
	(*Flow)(nil),                  // 2: protocol.Flow
	(*Trigger)(nil),               // 3: protocol.Trigger
	(*CliManualTrigger)(nil),      // 4: protocol.CliManualTrigger
	(*ScheduleCron)(nil),          // 5: protocol.ScheduleCron
	(*McpEventTrigger)(nil),       // 6: protocol.McpEventTrigger
	(*HttpTrigger)(nil),           // 7: protocol.HttpTrigger
	(*Step)(nil),                  // 8: protocol.Step
	(*Execute)(nil),               // 9: protocol.Execute
	(*Parallel)(nil),              // 10: protocol.Parallel
	(*Foreach)(nil),               // 11: protocol.Foreach
	(*AwaitEvent)(nil),            // 12: protocol.AwaitEvent
	(*Wait)(nil),                  // 13: protocol.Wait
	(*RetryPolicy)(nil),           // 14: protocol.RetryPolicy
	(*CatchBlock)(nil),            // 15: protocol.CatchBlock
	(*MatchCondition)(nil),        // 16: protocol.MatchCondition
	(*Value)(nil),                 // 17: protocol.Value
	(*Struct)(nil),                // 18: protocol.Struct
	(*ListValue)(nil),             // 19: protocol.ListValue
	(*StepRun)(nil),               // 20: protocol.StepRun
	(*Run)(nil),                   // 21: protocol.Run
	nil,                           // 22: protocol.Flow.VarsEntry
	nil,                           // 23: protocol.HttpTrigger.HeadersEntry
	nil,                           // 24: protocol.Execute.WithEntry
	nil,                           // 25: protocol.MatchCondition.EqualsEntry
	nil,                           // 26: protocol.Struct.FieldsEntry
	nil,                           // 27: protocol.StepRun.OutputsEntry
	nil,                           // 28: protocol.Run.EventEntry
	nil,                           // 29: protocol.Run.VarsEntry
	(*durationpb.Duration)(nil),   // 30: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 31: google.protobuf.Timestamp
}
var file_spec_proto_flow_proto_depIdxs = []int32{
	3,  // 0: protocol.Flow.on:type_name -> protocol.Trigger
	22, // 1: protocol.Flow.vars:type_name -> protocol.Flow.VarsEntry
	8,  // 2: protocol.Flow.steps:type_name -> protocol.Step
	8,  // 3: protocol.Flow.catch:type_name -> protocol.Step
	4,  // 4: protocol.Trigger.cli_manual:type_name -> protocol.CliManualTrigger
	5,  // 5: protocol.Trigger.schedule:type_name -> protocol.ScheduleCron
	6,  // 6: protocol.Trigger.mcp_event:type_name -> protocol.McpEventTrigger
	7,  // 7: protocol.Trigger.http:type_name -> protocol.HttpTrigger
	23, // 8: protocol.HttpTrigger.headers:type_name -> protocol.HttpTrigger.HeadersEntry
	9,  // 9: protocol.Step.exec:type_name -> protocol.Execute
	10, // 10: protocol.Step.parallel:type_name -> protocol.Parallel
	11, // 11: protocol.Step.foreach:type_name -> protocol.Foreach
	12, // 12: protocol.Step.await_event:type_name -> protocol.AwaitEvent
	13, // 13: protocol.Step.wait:type_name -> protocol.Wait
	24, // 14: protocol.Execute.with:type_name -> protocol.Execute.WithEntry
	14, // 15: protocol.Execute.retry:type_name -> protocol.RetryPolicy
	15, // 16: protocol.Execute.catch:type_name -> protocol.CatchBlock
	8,  // 17: protocol.Parallel.steps:type_name -> protocol.Step
	8,  // 18: protocol.Foreach.template:type_name -> protocol.Step
	8,  // 19: protocol.Foreach.steps:type_name -> protocol.Step
	16, // 20: protocol.AwaitEvent.match:type_name -> protocol.MatchCondition
	30, // 21: protocol.AwaitEvent.timeout:type_name -> google.protobuf.Duration
	30, // 22: protocol.RetryPolicy.backoff:type_name -> google.protobuf.Duration
	8,  // 23: protocol.CatchBlock.handler:type_name -> protocol.Step
	25, // 24: protocol.MatchCondition.equals:type_name -> protocol.MatchCondition.EqualsEntry
	18, // 25: protocol.Value.m:type_name -> protocol.Struct
	19, // 26: protocol.Value.l:type_name -> protocol.ListValue
	26, // 27: protocol.Struct.fields:type_name -> protocol.Struct.FieldsEntry
	17, // 28: protocol.ListValue.values:type_name -> protocol.Value
	27, // 29: protocol.StepRun.outputs:type_name -> protocol.StepRun.OutputsEntry
	1,  // 30: protocol.StepRun.status:type_name -> protocol.StepStatus
	31, // 31: protocol.StepRun.started_at:type_name -> google.protobuf.Timestamp
	31, // 32: protocol.StepRun.ended_at:type_name -> google.protobuf.Timestamp
	28, // 33: protocol.Run.event:type_name -> protocol.Run.EventEntry
	29, // 34: protocol.Run.vars:type_name -> protocol.Run.VarsEntry
	20, // 35: protocol.Run.steps:type_name -> protocol.StepRun
	0,  // 36: protocol.Run.status:type_name -> protocol.RunStatus
	31, // 37: protocol.Run.started_at:type_name -> google.protobuf.Timestamp
	31, // 38: protocol.Run.ended_at:type_name -> google.protobuf.Timestamp
	17, // 39: protocol.Flow.VarsEntry.value:type_name -> protocol.Value
	17, // 40: protocol.Execute.WithEntry.value:type_name -> protocol.Value
	17, // 41: protocol.Struct.FieldsEntry.value:type_name -> protocol.Value
	17, // 42: protocol.StepRun.OutputsEntry.value:type_name -> protocol.Value
	17, // 43: protocol.Run.EventEntry.value:type_name -> protocol.Value
	17, // 44: protocol.Run.VarsEntry.value:type_name -> protocol.Value
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_spec_proto_flow_proto_init() }
func file_spec_proto_flow_proto_init() {
	if File_spec_proto_flow_proto != nil {
		return
	}
	file_spec_proto_flow_proto_msgTypes[1].OneofWrappers = []any{
		(*Trigger_CliManual)(nil),
		(*Trigger_Schedule)(nil),
		(*Trigger_McpEvent)(nil),
		(*Trigger_Http)(nil),
	}
	file_spec_proto_flow_proto_msgTypes[6].OneofWrappers = []any{
		(*Step_Exec)(nil),
		(*Step_Parallel)(nil),
		(*Step_Foreach)(nil),
		(*Step_AwaitEvent)(nil),
		(*Step_Wait)(nil),
	}
	file_spec_proto_flow_proto_msgTypes[15].OneofWrappers = []any{
		(*Value_S)(nil),
		(*Value_N)(nil),
		(*Value_B)(nil),
		(*Value_M)(nil),
		(*Value_L)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spec_proto_flow_proto_rawDesc), len(file_spec_proto_flow_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spec_proto_flow_proto_goTypes,
		DependencyIndexes: file_spec_proto_flow_proto_depIdxs,
		EnumInfos:         file_spec_proto_flow_proto_enumTypes,
		MessageInfos:      file_spec_proto_flow_proto_msgTypes,
	}.Build()
	File_spec_proto_flow_proto = out.File
	file_spec_proto_flow_proto_goTypes = nil
	file_spec_proto_flow_proto_depIdxs = nil
}
